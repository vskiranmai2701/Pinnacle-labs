import cv2
import numpy as np

def region_of_interest(img, vertices):
    mask = np.zeros_like(img)
    cv2.fillPoly(mask, vertices, 255)
    masked_img = cv2.bitwise_and(img, mask)
    return masked_img

def draw_lines(img, lines, color=(0, 255, 0), thickness=2):
    if lines is not None:
        for line in lines:
            for x1, y1, x2, y2 in line:
                cv2.line(img, (x1, y1), (x2, y2), color, thickness)
    return img

def process_frame(frame):
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    blur = cv2.GaussianBlur(gray, (5, 5), 0)
    edges = cv2.Canny(blur, 50, 150)
    height, width = frame.shape[:2]
    roi_vertices = [(0, height), (width / 2, height / 2), (width, height)]
    roi = region_of_interest(edges, np.array([roi_vertices], np.int32))
    lines = cv2.HoughLinesP(roi, 1, np.pi / 180, 50, minLineLength=100, maxLineGap=50)
    frame_with_lines = draw_lines(frame, lines)
    return frame_with_lines

# Path to the input video file
video_path = "C:\\Users\\Dell\\OneDrive\\Desktop\\Task-1\\test_video.mp4"

# Create a VideoCapture object
cap = cv2.VideoCapture(video_path)

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    # Process the frame to detect lane lines
    processed_frame = process_frame(frame)

    # Display the frame with detected lane lines
    cv2.imshow('Lane Detection', processed_frame)

    # Exit the video window when the 'q' key is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the capture and close windows
cap.release()
cv2.destroyAllWindows()
